/*The MIT License (MIT)

Copyright (c) <2013> <Keven "Varonth" Schulz>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/** 
 * Modified the file jGW2API.java from the above software to use V2 of the API 
 * for the sole purpose of converting gold to gems in commerce/exchange of the GW2 API
 **/

package gemTracker;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.net.URL;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;

import org.json.*;

public class jGW2API {    
    /**
     * This string is the standard URL used in all calls to the GW2 API.
     */
    public static final String Standard_URL = "https://api.guildwars2.com";
    /**
     * This is the GW2 API version used in the API calls
     */
    public static String API_Version = "/v2/";
   
    private static SSLSocketFactory socketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
   
    /*
     * Member fields
     */
   
    private HttpsURLConnection httpsConnection;
   
    /*
     * Constructors
     */
    /**
     * Contructs a new jGW2API object, which will use a SocketFactory generated by StartComSSLSocketFactory for SSLSockets
     * @param url The url the HttpsURLConnection should connect to
     * @throws IOException Thrown if the HttpsURLConnection times out, is not responding etc.
     */
    public jGW2API(URL url) throws IOException {
        this.httpsConnection = (HttpsURLConnection) url.openConnection();
        this.httpsConnection.setSSLSocketFactory(jGW2API.socketFactory);
    }
   
    /*
     * Methods
     */
   
    /**
     * This method is used to return a JSONObject read in from the HttpsURLConnection.
     * @return The JSONObject that was retrieved via HttpsURLConnection
     * @throws IOException Thrown if the HttpsURLConnection times out, is not responding etc.
     * @throws JSONException 
     */

    public JSONObject getJSONObject() throws IOException, JSONException {      
        BufferedReader buf = new BufferedReader(new InputStreamReader(this.httpsConnection.getInputStream()));
        String jsonString = "";
        String read;
        while ((read = buf.readLine()) != null) {
            jsonString += read;
        }
        return new JSONObject(jsonString);        
    }
   
    /**
     * Can be used for direct access to the HTTP data
     * @return the HttpsURLConnection used by this jGW2API object
     */
    public HttpsURLConnection getHttpsURLConnection() {
        return this.httpsConnection;
    }
   
    /**
     * Static method to retrieve informations from commerce/exchange/coins API
     * @return The JSONObject retrieved from the commerce/exchange/coins API
     * @throws IOException Thrown if the HttpsURLConnection times out, is not responding etc.
     * @throws JSONException 
     */
    static public JSONObject getCoins(String quantity) throws IOException, JSONException {
        return new jGW2API(new URL(jGW2API.Standard_URL+jGW2API.API_Version+"commerce/exchange/coins?quantity="+quantity)).getJSONObject();
    }	
    
    static public JSONObject getGems(String quantity) throws IOException, JSONException {
        return new jGW2API(new URL(jGW2API.Standard_URL+jGW2API.API_Version+"commerce/exchange/gems?quantity="+quantity)).getJSONObject();
    }	
}